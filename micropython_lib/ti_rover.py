from typing import Literal, overload, Optional

DistanceUnit = Literal["units", "m", "revs"]
SpeedUnit = Literal["units/s", "m/s", "revs/s"]

def stop() -> None: ...
def resume() -> None: ...
def stay(time: float) -> None: ...
def to_xy(x: float, y: float) -> None: ...
def to_polar(r: float, theta: float) -> None: ...
def to_angle(angle: float) -> None: ...

@overload
def forward(distance: float) -> None: ...
@overload
def forward(distance: float, unit: DistanceUnit) -> None: ...
@overload
def forward(distance: float, unit: DistanceUnit, speed: float, speed_unit: SpeedUnit) -> None: ...
def forward(distance: float, unit: Optional[DistanceUnit] = None,
            speed: Optional[float] = None, speed_unit: Optional[SpeedUnit] = None) -> None: ...

@overload
def backward(distance: float) -> None: ...
@overload
def backward(distance: float, unit: DistanceUnit) -> None: ...
@overload
def backward(distance: float, unit: DistanceUnit, speed: float, speed_unit: SpeedUnit) -> None: ...
def backward(distance: float, unit: Optional[DistanceUnit] = None,
             speed: Optional[float] = None, speed_unit: Optional[SpeedUnit] = None) -> None: ...

@overload
def left(angle: float) -> None: ...
@overload
def left(angle: float, unit: str) -> None: ...
def left(angle: float, unit: Optional[str] = None) -> None: ...

@overload
def right(angle: float) -> None: ...
@overload
def right(angle: float, unit: str) -> None: ...
def right(angle: float, unit: Optional[str] = None) -> None: ...

@overload
def forward_time(time: float) -> None: ...
@overload
def forward_time(time: float, speed: float, speed_unit: SpeedUnit) -> None: ...
def forward_time(time: float, speed: Optional[float] = None,
                 speed_unit: Optional[SpeedUnit] = None) -> None: ...

@overload
def backward_time(time: float) -> None: ...
@overload
def backward_time(time: float, speed: float, speed_unit: SpeedUnit) -> None: ...
def backward_time(time: float, speed: Optional[float] = None,
                  speed_unit: Optional[SpeedUnit] = None) -> None: ...

def disconnect_rv() -> None: ...
def discoonect_rv() -> None:  # alias for typo
    return disconnect_rv()

# --- Commands group (non-ti_system) ---
from ti_system import *

def wait_until_done() -> None: ...
def path_done() -> bool: ...

@overload
def position(x: float, y: float) -> None: ...
@overload
def position(x: float, y: float, heading: float, unit: str) -> None: ...
def position(x: float,
             y: float,
             heading: Optional[float] = None,
             unit: Optional[str] = None) -> None: ...

def grid_origin() -> None: ...
def grid_m_unit(scale_value: float) -> None: ...
def path_clear() -> None: ...
def zero_gyro() -> None: ...
